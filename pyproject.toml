[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "bots"
version = "0.1.0"
description = "Modular CLI AI Assistants"
readme = "README.md"
requires-python = "~=3.12"
license = "MIT"
dependencies = [
    "click>=8.1.0",
    "openai>=1.10.0",
    "pydantic>=2.0.0",
    "pydantic-ai>=0.1.3",
    "rich>=13.0.0",
    "pyyaml>=6.0",
    "python-liquid>=2.0.1",
]

[tool.setuptools]
packages = ["bots", "bots.llm", "bots.providers"]
include-package-data = true

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "build>=1.0.0",
    "pyright>=1.1.400",
]

[project.scripts]
bots = "bots.cli:main"

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E501"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--tb=short",
    "--disable-warnings",
    "-p no:warnings",
    "-p no:cacheprovider",
]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.pyright]
include = ["bots"]
exclude = ["**/__pycache__"]

# Basic configuration
reportMissingImports = true
reportMissingTypeStubs = false 

# Special exemptions
reportIncompatibleMethodOverride = "none"  # For AsyncIterator in providers
reportUnusedFunction = "none"  # For decorator-created functions

# These are specific to the OpenAI API
reportUnknownMemberType = "none"  # For OpenAI API's dynamic types
reportUnknownVariableType = "none"  # For OpenAI API's dynamic types
reportArgumentType = "none"  # For OpenAI API's complicated types
reportCallIssue = "none"  # For OpenAI API calls

# Type checking mode
typeCheckingMode = "basic"  # Use "basic" instead of "strict" for this codebase

# Enable these useful checks
reportPrivateUsage = "error" 
reportUnnecessaryIsInstance = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryCast = "error"
